{"version":3,"file":"bundle.js","sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/circles.js","src/world.js","src/group.js","src/circle.js","node_modules/hammerjs/hammer.js"],"names":["Hammer","require","World","Group","Circle","makeCanvasAutoFullwindow","canvas","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","Circles","world","running","past","handlers","that","this","document","createElement","style","position","top","right","display","margin","body","appendChild","ctx","getContext","hammertime","on","event","x","y","i","touchedCircles","c","center","search","length","hasOwnProperty","call","startAnimationLoop","loopFn","present","dt","Date","now","draw","requestAnimationFrame","startAnimation","stopAnimation","createCircle","r","color","add","searchInside","handler","off","start","stop","exports","createWorld","options","extension","prototype","version","w","h","clearRect","module","items","item","push","result","found","j","moveTo","moveBy","dx","dy","moveToward","distance","dc","Math","sqrt","movePolar","angle","cos","sin","minDistanceWithoutColliding","m","beginPath","arc","PI","fillStyle","fill","exportName","undefined","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","extend","dest","src","merge","keys","Object","inherit","child","base","properties","childP","baseP","create","constructor","_super","apply","arguments","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","target","types","splitStr","type","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","inputTarget","domHandler","ev","enable","init","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","getCenter","timeStamp","deltaTime","getAngle","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","scale","getScale","rotation","getRotation","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","v","getVelocity","abs","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","atan2","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","allow","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","TouchAction","value","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","Recognizer","id","defaults","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","recognizers","preset","Manager","touchAction","toggleCssProps","recognizeWith","requireFailure","cssProps","name","triggerDomEvent","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM",2,3,4,5,"MSPointerEvent","removePointer","eventTypeNormalized","toLowerCase","replace","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","index","hasRequireFailures","canRecognizeWith","withState","tryEmit","canEmit","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","force","stopped","curRecognizer","existing","remove","events","Tap","Pan","Swipe","Pinch","Rotate","Press","define","amd"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var Hammer = require('hammerjs');\n\nvar World = require('./world');\nvar Group = require('./group');\nvar Circle = require('./circle');\n\n\n// ****************\n// Helper functions\n// ****************\n\nvar makeCanvasAutoFullwindow = function (canvas) {\n  // Canvas is resized when window size changes, e.g.\n  // when a mobile device is tilted.\n  //\n  // Parameter\n  //   canvas\n  //     HTML Canvas element\n  //\n  var resizeCanvas = function () {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  };\n  // resize the canvas to fill browser window dynamically\n  window.addEventListener('resize', resizeCanvas, false);\n  // Initially resized to fullscreen.\n  resizeCanvas();\n};\n\n\n\n// **********\n// Exceptions\n// **********\n//...\n\n\n\n// ***********\n// Constructor\n// ***********\n\nvar Circles = function () {\n\n  // Root element\n  var world = new World();\n\n  // To pause animation loop\n  var running = true;\n\n  // number, unix timestamp milliseconds of most recent frame.\n  var past = null;\n\n  // Event handling\n  // see this.on and hammertime.on\n  var handlers = {};\n\n  // 'that' is the call context for background event handlers\n  var that = this;\n\n  // Everything is drawn on canvas.\n  // Styling is required to make canvas window size.\n  var canvas = document.createElement('canvas');\n  canvas.style.position = 'fixed';\n  canvas.style.top = '0px';\n  canvas.style.right = '0px';\n  canvas.style.display = 'block';\n  canvas.style.margin = '0';\n  canvas.style.width = '100%';\n  canvas.style.height = '100%';\n  document.body.appendChild(canvas);\n  var ctx = canvas.getContext('2d');\n\n  // Handle input with Hammer.js touch library\n  var hammertime = new Hammer(canvas);\n  hammertime.on('tap', function (event) {\n    var x, y, i, touchedCircles, c;\n    x = event.center.x;\n    y = event.center.y;\n    touchedCircles = world.search(x, y, 0);\n    if (touchedCircles.length > 0) {\n      // Hit at least one circle\n      for (i = 0; i < touchedCircles.length; i += 1) {\n        c = touchedCircles[i];\n        if (c.handlers.hasOwnProperty('tap')) {\n          c.handlers['tap'].call(c, c, x ,y);\n        }\n      }\n    } else {\n      // Hit background\n      if (handlers.hasOwnProperty('tap')) {\n        handlers['tap'].call(that, that, x, y);\n      }\n    }\n  });\n\n  // Make canvas resize automatically to full window area\n  makeCanvasAutoFullwindow(canvas);\n\n\n  var startAnimationLoop = function loopFn() {\n\n    // Time difference from previous frame in milliseconds\n    var present, dt;\n    present = Date.now();\n    dt = (past === null) ? 0 : present - past;\n    past = present;\n\n    // Draw; View current model\n    world.draw(ctx, canvas.width, canvas.height);\n\n    // Recursion\n    // Allow only one viewLoop recursion at a time.\n    if (running) {\n      window.requestAnimationFrame(loopFn);\n    }\n  };\n\n  var startAnimation = function () {\n    if (!running) {\n      running = true;\n      startAnimationLoop();\n    }\n  };\n\n  var stopAnimation = function () {\n    running = false;\n  };\n\n  if (running) {\n    startAnimationLoop();\n  }\n\n  // Member functions.\n  // Define here instead prototype to keep private variables private.\n\n  this.createCircle = function (x, y, r, color) {\n    // Create circle, add it to the world and return it.\n    var c = new Circle(x, y, r, color);\n    world.add(c);\n    return c;\n  };\n\n  //this.createGroup = function () {\n  //  var g = new Group();\n  //  world.add(g);\n  //  return g;\n  //};\n\n  this.searchInside = function (x, y, r) {\n    // Return\n    //   array of circles colliding with the specified circle.\n    return world.search(x, y, r);\n  };\n\n  // Event handlers\n  this.on = function (event, handler) {\n    handlers[event] = handler;\n  };\n  this.off = function (event) {\n    delete handlers[event];\n  };\n\n  this.start = startAnimation;\n  this.stop = stopAnimation;\n\n};\n\n\nexports.createWorld = function (canvas, options) {\n  return new Circles(canvas, options);\n};\n\n\n\n// *************\n// Extendability\n// *************\n// Usage\n//   var c = Circles.create(...)\n//   Circles.extension.myFunction = function (...) {...}\n//   c.myFunction()\nexports.extension = Circles.prototype;\n\n\n\n// *******\n// Version\n// *******\nexports.version = '0.2.0';\n","// canvas background / circle container\nvar Group = require('./group');\n\nvar World = function () {\n};\n\nWorld.prototype = new Group();\n\nWorld.prototype.draw = function (ctx, w, h) {\n  // Parameter\n  //   ctx\n  //     Canvas drawing context\n  //   w\n  //     Canvas width\n  //   h\n  //     Canvas height\n  ctx.clearRect(0, 0, w, h);\n\n  Group.prototype.draw.call(this, ctx);\n};\n\nmodule.exports = World;\n","// Circle group.\n// Composite pattern is used.\n\nvar Group = function () {\n  this.items = [];\n};\n\nGroup.prototype.add = function (item) {\n  // Parameter\n  //   item\n  //     a group or circle\n  this.items.push(item);\n};\n\nGroup.prototype.search = function (x, y, r) {\n  // Parameter\n  //   x, y\n  //\n  // Return\n  //   array of items colliding with this point\n  var result, found, i, j;\n  result = [];\n  for (i = 0; i < this.items.length; i += 1) {\n    found = this.items[i].search(x, y, r);\n    if (found !== null) {\n      for (j = 0; j < found.length; j += 1) {\n        result.push(found[j]);\n      }\n    }\n  }\n  return result;\n};\n\nGroup.prototype.draw = function (ctx) {\n  // Parameter\n  //   ctx\n  //     Canvas drawing context\n  for (var i = 0; i < this.items.length; i += 1) {\n    this.items[i].draw(ctx);\n  }\n};\n\nmodule.exports = Group;\n","// Circle on canvas\n\nvar Circle = function (x, y, r, color) {\n  // Parameter\n  //   x\n  //   y\n  //   r\n  //   color\n  //     Any canvas fillStyle\n  //     \"#ff0000\", \"red\"\n  //     https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.fillStyle\n  this.x = x;\n  this.y = y;\n  this.r = r;\n  this.color = color;\n\n  this.handlers = {};\n};\n\nCircle.prototype.moveTo = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\n\nCircle.prototype.moveBy = function (dx, dy) {\n  this.x += dx;\n  this.y += dy;\n};\n\nCircle.prototype.moveToward = function (x, y, distance) {\n  var dx = x - this.x;\n  var dy = y - this.y;\n  var dc = Math.sqrt(dx * dx + dy * dy);\n  if (dc !== 0) {\n    this.x += distance * dx / dc;\n    this.y += distance * dy / dc;\n  }\n};\n\nCircle.prototype.movePolar = function (distance, angle) {\n  this.x += distance * Math.cos(angle);\n  this.y -= distance * Math.sin(angle); // minus because inverted coords\n};\n\nCircle.prototype.search = function (x, y, r) {\n  // Return\n  //   array of matched objects\n  //   null if nothing found\n  var dx = x - this.x;\n  var dy = y - this.y;\n  var minDistanceWithoutColliding = this.r + r;\n  var m = minDistanceWithoutColliding;\n  if (m * m > dx * dx + dy * dy) {\n    // (x,y) hits\n    return [this];\n  } // else\n  return null;\n};\n\nCircle.prototype.on = function (event, handler) {\n  this.handlers[event] = handler;\n};\n\nCircle.prototype.off = function (event) {\n  delete this.handlers[event];\n};\n\nCircle.prototype.draw = function (ctx) {\n  // Parameter\n  //   ctx\n  //     Canvas drawing context\n  ctx.beginPath();\n  ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n  ctx.fillStyle = this.color;\n  ctx.fill();\n};\n\nmodule.exports = Circle;\n","/*! Hammer.JS - v2.0.4 - 2014-09-28\r\n * http://hammerjs.github.io/\r\n *\r\n * Copyright (c) 2014 Jorik Tangelder;\r\n * Licensed under the MIT license */\r\n(function(window, document, exportName, undefined) {\r\n  'use strict';\r\n\r\nvar VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];\r\nvar TEST_ELEMENT = document.createElement('div');\r\n\r\nvar TYPE_FUNCTION = 'function';\r\n\r\nvar round = Math.round;\r\nvar abs = Math.abs;\r\nvar now = Date.now;\r\n\r\n/**\r\n * set a timeout with a given scope\r\n * @param {Function} fn\r\n * @param {Number} timeout\r\n * @param {Object} context\r\n * @returns {number}\r\n */\r\nfunction setTimeoutContext(fn, timeout, context) {\r\n    return setTimeout(bindFn(fn, context), timeout);\r\n}\r\n\r\n/**\r\n * if the argument is an array, we want to execute the fn on each entry\r\n * if it aint an array we don't want to do a thing.\r\n * this is used by all the methods that accept a single and array argument.\r\n * @param {*|Array} arg\r\n * @param {String} fn\r\n * @param {Object} [context]\r\n * @returns {Boolean}\r\n */\r\nfunction invokeArrayArg(arg, fn, context) {\r\n    if (Array.isArray(arg)) {\r\n        each(arg, context[fn], context);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * walk objects and arrays\r\n * @param {Object} obj\r\n * @param {Function} iterator\r\n * @param {Object} context\r\n */\r\nfunction each(obj, iterator, context) {\r\n    var i;\r\n\r\n    if (!obj) {\r\n        return;\r\n    }\r\n\r\n    if (obj.forEach) {\r\n        obj.forEach(iterator, context);\r\n    } else if (obj.length !== undefined) {\r\n        i = 0;\r\n        while (i < obj.length) {\r\n            iterator.call(context, obj[i], i, obj);\r\n            i++;\r\n        }\r\n    } else {\r\n        for (i in obj) {\r\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @param {Boolean} [merge]\r\n * @returns {Object} dest\r\n */\r\nfunction extend(dest, src, merge) {\r\n    var keys = Object.keys(src);\r\n    var i = 0;\r\n    while (i < keys.length) {\r\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\r\n            dest[keys[i]] = src[keys[i]];\r\n        }\r\n        i++;\r\n    }\r\n    return dest;\r\n}\r\n\r\n/**\r\n * merge the values from src in the dest.\r\n * means that properties that exist in dest will not be overwritten by src\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @returns {Object} dest\r\n */\r\nfunction merge(dest, src) {\r\n    return extend(dest, src, true);\r\n}\r\n\r\n/**\r\n * simple class inheritance\r\n * @param {Function} child\r\n * @param {Function} base\r\n * @param {Object} [properties]\r\n */\r\nfunction inherit(child, base, properties) {\r\n    var baseP = base.prototype,\r\n        childP;\r\n\r\n    childP = child.prototype = Object.create(baseP);\r\n    childP.constructor = child;\r\n    childP._super = baseP;\r\n\r\n    if (properties) {\r\n        extend(childP, properties);\r\n    }\r\n}\r\n\r\n/**\r\n * simple function bind\r\n * @param {Function} fn\r\n * @param {Object} context\r\n * @returns {Function}\r\n */\r\nfunction bindFn(fn, context) {\r\n    return function boundFn() {\r\n        return fn.apply(context, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * let a boolean value also be a function that must return a boolean\r\n * this first item in args will be used as the context\r\n * @param {Boolean|Function} val\r\n * @param {Array} [args]\r\n * @returns {Boolean}\r\n */\r\nfunction boolOrFn(val, args) {\r\n    if (typeof val == TYPE_FUNCTION) {\r\n        return val.apply(args ? args[0] || undefined : undefined, args);\r\n    }\r\n    return val;\r\n}\r\n\r\n/**\r\n * use the val2 when val1 is undefined\r\n * @param {*} val1\r\n * @param {*} val2\r\n * @returns {*}\r\n */\r\nfunction ifUndefined(val1, val2) {\r\n    return (val1 === undefined) ? val2 : val1;\r\n}\r\n\r\n/**\r\n * addEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction addEventListeners(target, types, handler) {\r\n    each(splitStr(types), function(type) {\r\n        target.addEventListener(type, handler, false);\r\n    });\r\n}\r\n\r\n/**\r\n * removeEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction removeEventListeners(target, types, handler) {\r\n    each(splitStr(types), function(type) {\r\n        target.removeEventListener(type, handler, false);\r\n    });\r\n}\r\n\r\n/**\r\n * find if a node is in the given parent\r\n * @method hasParent\r\n * @param {HTMLElement} node\r\n * @param {HTMLElement} parent\r\n * @return {Boolean} found\r\n */\r\nfunction hasParent(node, parent) {\r\n    while (node) {\r\n        if (node == parent) {\r\n            return true;\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * small indexOf wrapper\r\n * @param {String} str\r\n * @param {String} find\r\n * @returns {Boolean} found\r\n */\r\nfunction inStr(str, find) {\r\n    return str.indexOf(find) > -1;\r\n}\r\n\r\n/**\r\n * split string on whitespace\r\n * @param {String} str\r\n * @returns {Array} words\r\n */\r\nfunction splitStr(str) {\r\n    return str.trim().split(/\\s+/g);\r\n}\r\n\r\n/**\r\n * find if a array contains the object using indexOf or a simple polyFill\r\n * @param {Array} src\r\n * @param {String} find\r\n * @param {String} [findByKey]\r\n * @return {Boolean|Number} false when not found, or the index\r\n */\r\nfunction inArray(src, find, findByKey) {\r\n    if (src.indexOf && !findByKey) {\r\n        return src.indexOf(find);\r\n    } else {\r\n        var i = 0;\r\n        while (i < src.length) {\r\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\r\n                return i;\r\n            }\r\n            i++;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * convert array-like objects to real arrays\r\n * @param {Object} obj\r\n * @returns {Array}\r\n */\r\nfunction toArray(obj) {\r\n    return Array.prototype.slice.call(obj, 0);\r\n}\r\n\r\n/**\r\n * unique array with objects based on a key (like 'id') or just by the array's value\r\n * @param {Array} src [{id:1},{id:2},{id:1}]\r\n * @param {String} [key]\r\n * @param {Boolean} [sort=False]\r\n * @returns {Array} [{id:1},{id:2}]\r\n */\r\nfunction uniqueArray(src, key, sort) {\r\n    var results = [];\r\n    var values = [];\r\n    var i = 0;\r\n\r\n    while (i < src.length) {\r\n        var val = key ? src[i][key] : src[i];\r\n        if (inArray(values, val) < 0) {\r\n            results.push(src[i]);\r\n        }\r\n        values[i] = val;\r\n        i++;\r\n    }\r\n\r\n    if (sort) {\r\n        if (!key) {\r\n            results = results.sort();\r\n        } else {\r\n            results = results.sort(function sortUniqueArray(a, b) {\r\n                return a[key] > b[key];\r\n            });\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n/**\r\n * get the prefixed property\r\n * @param {Object} obj\r\n * @param {String} property\r\n * @returns {String|Undefined} prefixed\r\n */\r\nfunction prefixed(obj, property) {\r\n    var prefix, prop;\r\n    var camelProp = property[0].toUpperCase() + property.slice(1);\r\n\r\n    var i = 0;\r\n    while (i < VENDOR_PREFIXES.length) {\r\n        prefix = VENDOR_PREFIXES[i];\r\n        prop = (prefix) ? prefix + camelProp : property;\r\n\r\n        if (prop in obj) {\r\n            return prop;\r\n        }\r\n        i++;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * get a unique id\r\n * @returns {number} uniqueId\r\n */\r\nvar _uniqueId = 1;\r\nfunction uniqueId() {\r\n    return _uniqueId++;\r\n}\r\n\r\n/**\r\n * get the window object of an element\r\n * @param {HTMLElement} element\r\n * @returns {DocumentView|Window}\r\n */\r\nfunction getWindowForElement(element) {\r\n    var doc = element.ownerDocument;\r\n    return (doc.defaultView || doc.parentWindow);\r\n}\r\n\r\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\r\n\r\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\r\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\r\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\r\n\r\nvar INPUT_TYPE_TOUCH = 'touch';\r\nvar INPUT_TYPE_PEN = 'pen';\r\nvar INPUT_TYPE_MOUSE = 'mouse';\r\nvar INPUT_TYPE_KINECT = 'kinect';\r\n\r\nvar COMPUTE_INTERVAL = 25;\r\n\r\nvar INPUT_START = 1;\r\nvar INPUT_MOVE = 2;\r\nvar INPUT_END = 4;\r\nvar INPUT_CANCEL = 8;\r\n\r\nvar DIRECTION_NONE = 1;\r\nvar DIRECTION_LEFT = 2;\r\nvar DIRECTION_RIGHT = 4;\r\nvar DIRECTION_UP = 8;\r\nvar DIRECTION_DOWN = 16;\r\n\r\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\r\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\r\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\r\n\r\nvar PROPS_XY = ['x', 'y'];\r\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\r\n\r\n/**\r\n * create new input type manager\r\n * @param {Manager} manager\r\n * @param {Function} callback\r\n * @returns {Input}\r\n * @constructor\r\n */\r\nfunction Input(manager, callback) {\r\n    var self = this;\r\n    this.manager = manager;\r\n    this.callback = callback;\r\n    this.element = manager.element;\r\n    this.target = manager.options.inputTarget;\r\n\r\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\r\n    // so when disabled the input events are completely bypassed.\r\n    this.domHandler = function(ev) {\r\n        if (boolOrFn(manager.options.enable, [manager])) {\r\n            self.handler(ev);\r\n        }\r\n    };\r\n\r\n    this.init();\r\n\r\n}\r\n\r\nInput.prototype = {\r\n    /**\r\n     * should handle the inputEvent data and trigger the callback\r\n     * @virtual\r\n     */\r\n    handler: function() { },\r\n\r\n    /**\r\n     * bind the events\r\n     */\r\n    init: function() {\r\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\r\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\r\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    },\r\n\r\n    /**\r\n     * unbind the events\r\n     */\r\n    destroy: function() {\r\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\r\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\r\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    }\r\n};\r\n\r\n/**\r\n * create new input type manager\r\n * called by the Manager constructor\r\n * @param {Hammer} manager\r\n * @returns {Input}\r\n */\r\nfunction createInputInstance(manager) {\r\n    var Type;\r\n    var inputClass = manager.options.inputClass;\r\n\r\n    if (inputClass) {\r\n        Type = inputClass;\r\n    } else if (SUPPORT_POINTER_EVENTS) {\r\n        Type = PointerEventInput;\r\n    } else if (SUPPORT_ONLY_TOUCH) {\r\n        Type = TouchInput;\r\n    } else if (!SUPPORT_TOUCH) {\r\n        Type = MouseInput;\r\n    } else {\r\n        Type = TouchMouseInput;\r\n    }\r\n    return new (Type)(manager, inputHandler);\r\n}\r\n\r\n/**\r\n * handle input events\r\n * @param {Manager} manager\r\n * @param {String} eventType\r\n * @param {Object} input\r\n */\r\nfunction inputHandler(manager, eventType, input) {\r\n    var pointersLen = input.pointers.length;\r\n    var changedPointersLen = input.changedPointers.length;\r\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\r\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\r\n\r\n    input.isFirst = !!isFirst;\r\n    input.isFinal = !!isFinal;\r\n\r\n    if (isFirst) {\r\n        manager.session = {};\r\n    }\r\n\r\n    // source event is the normalized value of the domEvents\r\n    // like 'touchstart, mouseup, pointerdown'\r\n    input.eventType = eventType;\r\n\r\n    // compute scale, rotation etc\r\n    computeInputData(manager, input);\r\n\r\n    // emit secret event\r\n    manager.emit('hammer.input', input);\r\n\r\n    manager.recognize(input);\r\n    manager.session.prevInput = input;\r\n}\r\n\r\n/**\r\n * extend the data with some usable properties like scale, rotate, velocity etc\r\n * @param {Object} manager\r\n * @param {Object} input\r\n */\r\nfunction computeInputData(manager, input) {\r\n    var session = manager.session;\r\n    var pointers = input.pointers;\r\n    var pointersLength = pointers.length;\r\n\r\n    // store the first input to calculate the distance and direction\r\n    if (!session.firstInput) {\r\n        session.firstInput = simpleCloneInputData(input);\r\n    }\r\n\r\n    // to compute scale and rotation we need to store the multiple touches\r\n    if (pointersLength > 1 && !session.firstMultiple) {\r\n        session.firstMultiple = simpleCloneInputData(input);\r\n    } else if (pointersLength === 1) {\r\n        session.firstMultiple = false;\r\n    }\r\n\r\n    var firstInput = session.firstInput;\r\n    var firstMultiple = session.firstMultiple;\r\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\r\n\r\n    var center = input.center = getCenter(pointers);\r\n    input.timeStamp = now();\r\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\r\n\r\n    input.angle = getAngle(offsetCenter, center);\r\n    input.distance = getDistance(offsetCenter, center);\r\n\r\n    computeDeltaXY(session, input);\r\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\r\n\r\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\r\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\r\n\r\n    computeIntervalInputData(session, input);\r\n\r\n    // find the correct target\r\n    var target = manager.element;\r\n    if (hasParent(input.srcEvent.target, target)) {\r\n        target = input.srcEvent.target;\r\n    }\r\n    input.target = target;\r\n}\r\n\r\nfunction computeDeltaXY(session, input) {\r\n    var center = input.center;\r\n    var offset = session.offsetDelta || {};\r\n    var prevDelta = session.prevDelta || {};\r\n    var prevInput = session.prevInput || {};\r\n\r\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\r\n        prevDelta = session.prevDelta = {\r\n            x: prevInput.deltaX || 0,\r\n            y: prevInput.deltaY || 0\r\n        };\r\n\r\n        offset = session.offsetDelta = {\r\n            x: center.x,\r\n            y: center.y\r\n        };\r\n    }\r\n\r\n    input.deltaX = prevDelta.x + (center.x - offset.x);\r\n    input.deltaY = prevDelta.y + (center.y - offset.y);\r\n}\r\n\r\n/**\r\n * velocity is calculated every x ms\r\n * @param {Object} session\r\n * @param {Object} input\r\n */\r\nfunction computeIntervalInputData(session, input) {\r\n    var last = session.lastInterval || input,\r\n        deltaTime = input.timeStamp - last.timeStamp,\r\n        velocity, velocityX, velocityY, direction;\r\n\r\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\r\n        var deltaX = last.deltaX - input.deltaX;\r\n        var deltaY = last.deltaY - input.deltaY;\r\n\r\n        var v = getVelocity(deltaTime, deltaX, deltaY);\r\n        velocityX = v.x;\r\n        velocityY = v.y;\r\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\r\n        direction = getDirection(deltaX, deltaY);\r\n\r\n        session.lastInterval = input;\r\n    } else {\r\n        // use latest velocity info if it doesn't overtake a minimum period\r\n        velocity = last.velocity;\r\n        velocityX = last.velocityX;\r\n        velocityY = last.velocityY;\r\n        direction = last.direction;\r\n    }\r\n\r\n    input.velocity = velocity;\r\n    input.velocityX = velocityX;\r\n    input.velocityY = velocityY;\r\n    input.direction = direction;\r\n}\r\n\r\n/**\r\n * create a simple clone from the input used for storage of firstInput and firstMultiple\r\n * @param {Object} input\r\n * @returns {Object} clonedInputData\r\n */\r\nfunction simpleCloneInputData(input) {\r\n    // make a simple copy of the pointers because we will get a reference if we don't\r\n    // we only need clientXY for the calculations\r\n    var pointers = [];\r\n    var i = 0;\r\n    while (i < input.pointers.length) {\r\n        pointers[i] = {\r\n            clientX: round(input.pointers[i].clientX),\r\n            clientY: round(input.pointers[i].clientY)\r\n        };\r\n        i++;\r\n    }\r\n\r\n    return {\r\n        timeStamp: now(),\r\n        pointers: pointers,\r\n        center: getCenter(pointers),\r\n        deltaX: input.deltaX,\r\n        deltaY: input.deltaY\r\n    };\r\n}\r\n\r\n/**\r\n * get the center of all the pointers\r\n * @param {Array} pointers\r\n * @return {Object} center contains `x` and `y` properties\r\n */\r\nfunction getCenter(pointers) {\r\n    var pointersLength = pointers.length;\r\n\r\n    // no need to loop when only one touch\r\n    if (pointersLength === 1) {\r\n        return {\r\n            x: round(pointers[0].clientX),\r\n            y: round(pointers[0].clientY)\r\n        };\r\n    }\r\n\r\n    var x = 0, y = 0, i = 0;\r\n    while (i < pointersLength) {\r\n        x += pointers[i].clientX;\r\n        y += pointers[i].clientY;\r\n        i++;\r\n    }\r\n\r\n    return {\r\n        x: round(x / pointersLength),\r\n        y: round(y / pointersLength)\r\n    };\r\n}\r\n\r\n/**\r\n * calculate the velocity between two points. unit is in px per ms.\r\n * @param {Number} deltaTime\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Object} velocity `x` and `y`\r\n */\r\nfunction getVelocity(deltaTime, x, y) {\r\n    return {\r\n        x: x / deltaTime || 0,\r\n        y: y / deltaTime || 0\r\n    };\r\n}\r\n\r\n/**\r\n * get the direction between two points\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Number} direction\r\n */\r\nfunction getDirection(x, y) {\r\n    if (x === y) {\r\n        return DIRECTION_NONE;\r\n    }\r\n\r\n    if (abs(x) >= abs(y)) {\r\n        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n    }\r\n    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n}\r\n\r\n/**\r\n * calculate the absolute distance between two points\r\n * @param {Object} p1 {x, y}\r\n * @param {Object} p2 {x, y}\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} distance\r\n */\r\nfunction getDistance(p1, p2, props) {\r\n    if (!props) {\r\n        props = PROPS_XY;\r\n    }\r\n    var x = p2[props[0]] - p1[props[0]],\r\n        y = p2[props[1]] - p1[props[1]];\r\n\r\n    return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * calculate the angle between two coordinates\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} angle\r\n */\r\nfunction getAngle(p1, p2, props) {\r\n    if (!props) {\r\n        props = PROPS_XY;\r\n    }\r\n    var x = p2[props[0]] - p1[props[0]],\r\n        y = p2[props[1]] - p1[props[1]];\r\n    return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\n/**\r\n * calculate the rotation degrees between two pointersets\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} rotation\r\n */\r\nfunction getRotation(start, end) {\r\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);\r\n}\r\n\r\n/**\r\n * calculate the scale factor between two pointersets\r\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} scale\r\n */\r\nfunction getScale(start, end) {\r\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\r\n}\r\n\r\nvar MOUSE_INPUT_MAP = {\r\n    mousedown: INPUT_START,\r\n    mousemove: INPUT_MOVE,\r\n    mouseup: INPUT_END\r\n};\r\n\r\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\r\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\r\n\r\n/**\r\n * Mouse events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction MouseInput() {\r\n    this.evEl = MOUSE_ELEMENT_EVENTS;\r\n    this.evWin = MOUSE_WINDOW_EVENTS;\r\n\r\n    this.allow = true; // used by Input.TouchMouse to disable mouse events\r\n    this.pressed = false; // mousedown state\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(MouseInput, Input, {\r\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\r\n    handler: function MEhandler(ev) {\r\n        var eventType = MOUSE_INPUT_MAP[ev.type];\r\n\r\n        // on start we want to have the left mouse button down\r\n        if (eventType & INPUT_START && ev.button === 0) {\r\n            this.pressed = true;\r\n        }\r\n\r\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\r\n            eventType = INPUT_END;\r\n        }\r\n\r\n        // mouse must be down, and mouse events are allowed (see the TouchMouse input)\r\n        if (!this.pressed || !this.allow) {\r\n            return;\r\n        }\r\n\r\n        if (eventType & INPUT_END) {\r\n            this.pressed = false;\r\n        }\r\n\r\n        this.callback(this.manager, eventType, {\r\n            pointers: [ev],\r\n            changedPointers: [ev],\r\n            pointerType: INPUT_TYPE_MOUSE,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\nvar POINTER_INPUT_MAP = {\r\n    pointerdown: INPUT_START,\r\n    pointermove: INPUT_MOVE,\r\n    pointerup: INPUT_END,\r\n    pointercancel: INPUT_CANCEL,\r\n    pointerout: INPUT_CANCEL\r\n};\r\n\r\n// in IE10 the pointer types is defined as an enum\r\nvar IE10_POINTER_TYPE_ENUM = {\r\n    2: INPUT_TYPE_TOUCH,\r\n    3: INPUT_TYPE_PEN,\r\n    4: INPUT_TYPE_MOUSE,\r\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\r\n};\r\n\r\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\r\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\r\n\r\n// IE10 has prefixed support, and case-sensitive\r\nif (window.MSPointerEvent) {\r\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\r\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\r\n}\r\n\r\n/**\r\n * Pointer events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction PointerEventInput() {\r\n    this.evEl = POINTER_ELEMENT_EVENTS;\r\n    this.evWin = POINTER_WINDOW_EVENTS;\r\n\r\n    Input.apply(this, arguments);\r\n\r\n    this.store = (this.manager.session.pointerEvents = []);\r\n}\r\n\r\ninherit(PointerEventInput, Input, {\r\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\r\n    handler: function PEhandler(ev) {\r\n        var store = this.store;\r\n        var removePointer = false;\r\n\r\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\r\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\r\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\r\n\r\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\r\n\r\n        // get index of the event in the store\r\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\r\n\r\n        // start and mouse must be down\r\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\r\n            if (storeIndex < 0) {\r\n                store.push(ev);\r\n                storeIndex = store.length - 1;\r\n            }\r\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n            removePointer = true;\r\n        }\r\n\r\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\r\n        if (storeIndex < 0) {\r\n            return;\r\n        }\r\n\r\n        // update the event in the store\r\n        store[storeIndex] = ev;\r\n\r\n        this.callback(this.manager, eventType, {\r\n            pointers: store,\r\n            changedPointers: [ev],\r\n            pointerType: pointerType,\r\n            srcEvent: ev\r\n        });\r\n\r\n        if (removePointer) {\r\n            // remove from the store\r\n            store.splice(storeIndex, 1);\r\n        }\r\n    }\r\n});\r\n\r\nvar SINGLE_TOUCH_INPUT_MAP = {\r\n    touchstart: INPUT_START,\r\n    touchmove: INPUT_MOVE,\r\n    touchend: INPUT_END,\r\n    touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\r\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * Touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction SingleTouchInput() {\r\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\r\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\r\n    this.started = false;\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(SingleTouchInput, Input, {\r\n    handler: function TEhandler(ev) {\r\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\r\n\r\n        // should we handle the touch events?\r\n        if (type === INPUT_START) {\r\n            this.started = true;\r\n        }\r\n\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        var touches = normalizeSingleTouches.call(this, ev, type);\r\n\r\n        // when done, reset the started state\r\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\r\n            this.started = false;\r\n        }\r\n\r\n        this.callback(this.manager, type, {\r\n            pointers: touches[0],\r\n            changedPointers: touches[1],\r\n            pointerType: INPUT_TYPE_TOUCH,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction normalizeSingleTouches(ev, type) {\r\n    var all = toArray(ev.touches);\r\n    var changed = toArray(ev.changedTouches);\r\n\r\n    if (type & (INPUT_END | INPUT_CANCEL)) {\r\n        all = uniqueArray(all.concat(changed), 'identifier', true);\r\n    }\r\n\r\n    return [all, changed];\r\n}\r\n\r\nvar TOUCH_INPUT_MAP = {\r\n    touchstart: INPUT_START,\r\n    touchmove: INPUT_MOVE,\r\n    touchend: INPUT_END,\r\n    touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * Multi-user touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction TouchInput() {\r\n    this.evTarget = TOUCH_TARGET_EVENTS;\r\n    this.targetIds = {};\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(TouchInput, Input, {\r\n    handler: function MTEhandler(ev) {\r\n        var type = TOUCH_INPUT_MAP[ev.type];\r\n        var touches = getTouches.call(this, ev, type);\r\n        if (!touches) {\r\n            return;\r\n        }\r\n\r\n        this.callback(this.manager, type, {\r\n            pointers: touches[0],\r\n            changedPointers: touches[1],\r\n            pointerType: INPUT_TYPE_TOUCH,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction getTouches(ev, type) {\r\n    var allTouches = toArray(ev.touches);\r\n    var targetIds = this.targetIds;\r\n\r\n    // when there is only one touch, the process can be simplified\r\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\r\n        targetIds[allTouches[0].identifier] = true;\r\n        return [allTouches, allTouches];\r\n    }\r\n\r\n    var i,\r\n        targetTouches,\r\n        changedTouches = toArray(ev.changedTouches),\r\n        changedTargetTouches = [],\r\n        target = this.target;\r\n\r\n    // get target touches from touches\r\n    targetTouches = allTouches.filter(function(touch) {\r\n        return hasParent(touch.target, target);\r\n    });\r\n\r\n    // collect touches\r\n    if (type === INPUT_START) {\r\n        i = 0;\r\n        while (i < targetTouches.length) {\r\n            targetIds[targetTouches[i].identifier] = true;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // filter changed touches to only contain touches that exist in the collected target ids\r\n    i = 0;\r\n    while (i < changedTouches.length) {\r\n        if (targetIds[changedTouches[i].identifier]) {\r\n            changedTargetTouches.push(changedTouches[i]);\r\n        }\r\n\r\n        // cleanup removed touches\r\n        if (type & (INPUT_END | INPUT_CANCEL)) {\r\n            delete targetIds[changedTouches[i].identifier];\r\n        }\r\n        i++;\r\n    }\r\n\r\n    if (!changedTargetTouches.length) {\r\n        return;\r\n    }\r\n\r\n    return [\r\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\r\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\r\n        changedTargetTouches\r\n    ];\r\n}\r\n\r\n/**\r\n * Combined touch and mouse input\r\n *\r\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\r\n * This because touch devices also emit mouse events while doing a touch.\r\n *\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction TouchMouseInput() {\r\n    Input.apply(this, arguments);\r\n\r\n    var handler = bindFn(this.handler, this);\r\n    this.touch = new TouchInput(this.manager, handler);\r\n    this.mouse = new MouseInput(this.manager, handler);\r\n}\r\n\r\ninherit(TouchMouseInput, Input, {\r\n    /**\r\n     * handle mouse and touch events\r\n     * @param {Hammer} manager\r\n     * @param {String} inputEvent\r\n     * @param {Object} inputData\r\n     */\r\n    handler: function TMEhandler(manager, inputEvent, inputData) {\r\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\r\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\r\n\r\n        // when we're in a touch event, so  block all upcoming mouse events\r\n        // most mobile browser also emit mouseevents, right after touchstart\r\n        if (isTouch) {\r\n            this.mouse.allow = false;\r\n        } else if (isMouse && !this.mouse.allow) {\r\n            return;\r\n        }\r\n\r\n        // reset the allowMouse when we're done\r\n        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {\r\n            this.mouse.allow = true;\r\n        }\r\n\r\n        this.callback(manager, inputEvent, inputData);\r\n    },\r\n\r\n    /**\r\n     * remove the event listeners\r\n     */\r\n    destroy: function destroy() {\r\n        this.touch.destroy();\r\n        this.mouse.destroy();\r\n    }\r\n});\r\n\r\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\r\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\r\n\r\n// magical touchAction value\r\nvar TOUCH_ACTION_COMPUTE = 'compute';\r\nvar TOUCH_ACTION_AUTO = 'auto';\r\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\r\nvar TOUCH_ACTION_NONE = 'none';\r\nvar TOUCH_ACTION_PAN_X = 'pan-x';\r\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\r\n\r\n/**\r\n * Touch Action\r\n * sets the touchAction property or uses the js alternative\r\n * @param {Manager} manager\r\n * @param {String} value\r\n * @constructor\r\n */\r\nfunction TouchAction(manager, value) {\r\n    this.manager = manager;\r\n    this.set(value);\r\n}\r\n\r\nTouchAction.prototype = {\r\n    /**\r\n     * set the touchAction value on the element or enable the polyfill\r\n     * @param {String} value\r\n     */\r\n    set: function(value) {\r\n        // find out the touch-action by the event handlers\r\n        if (value == TOUCH_ACTION_COMPUTE) {\r\n            value = this.compute();\r\n        }\r\n\r\n        if (NATIVE_TOUCH_ACTION) {\r\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\r\n        }\r\n        this.actions = value.toLowerCase().trim();\r\n    },\r\n\r\n    /**\r\n     * just re-set the touchAction value\r\n     */\r\n    update: function() {\r\n        this.set(this.manager.options.touchAction);\r\n    },\r\n\r\n    /**\r\n     * compute the value for the touchAction property based on the recognizer's settings\r\n     * @returns {String} value\r\n     */\r\n    compute: function() {\r\n        var actions = [];\r\n        each(this.manager.recognizers, function(recognizer) {\r\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\r\n                actions = actions.concat(recognizer.getTouchAction());\r\n            }\r\n        });\r\n        return cleanTouchActions(actions.join(' '));\r\n    },\r\n\r\n    /**\r\n     * this method is called on each input cycle and provides the preventing of the browser behavior\r\n     * @param {Object} input\r\n     */\r\n    preventDefaults: function(input) {\r\n        // not needed with native support for the touchAction property\r\n        if (NATIVE_TOUCH_ACTION) {\r\n            return;\r\n        }\r\n\r\n        var srcEvent = input.srcEvent;\r\n        var direction = input.offsetDirection;\r\n\r\n        // if the touch action did prevented once this session\r\n        if (this.manager.session.prevented) {\r\n            srcEvent.preventDefault();\r\n            return;\r\n        }\r\n\r\n        var actions = this.actions;\r\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE);\r\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\r\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\r\n\r\n        if (hasNone ||\r\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\r\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\r\n            return this.preventSrc(srcEvent);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\r\n     * @param {Object} srcEvent\r\n     */\r\n    preventSrc: function(srcEvent) {\r\n        this.manager.session.prevented = true;\r\n        srcEvent.preventDefault();\r\n    }\r\n};\r\n\r\n/**\r\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\r\n * @param {String} actions\r\n * @returns {*}\r\n */\r\nfunction cleanTouchActions(actions) {\r\n    // none\r\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\r\n        return TOUCH_ACTION_NONE;\r\n    }\r\n\r\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\r\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\r\n\r\n    // pan-x and pan-y can be combined\r\n    if (hasPanX && hasPanY) {\r\n        return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;\r\n    }\r\n\r\n    // pan-x OR pan-y\r\n    if (hasPanX || hasPanY) {\r\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\r\n    }\r\n\r\n    // manipulation\r\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\r\n        return TOUCH_ACTION_MANIPULATION;\r\n    }\r\n\r\n    return TOUCH_ACTION_AUTO;\r\n}\r\n\r\n/**\r\n * Recognizer flow explained; *\r\n * All recognizers have the initial state of POSSIBLE when a input session starts.\r\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\r\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\r\n *\r\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\r\n * which determines with state it should be.\r\n *\r\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\r\n * POSSIBLE to give it another change on the next cycle.\r\n *\r\n *               Possible\r\n *                  |\r\n *            +-----+---------------+\r\n *            |                     |\r\n *      +-----+-----+               |\r\n *      |           |               |\r\n *   Failed      Cancelled          |\r\n *                          +-------+------+\r\n *                          |              |\r\n *                      Recognized       Began\r\n *                                         |\r\n *                                      Changed\r\n *                                         |\r\n *                                  Ended/Recognized\r\n */\r\nvar STATE_POSSIBLE = 1;\r\nvar STATE_BEGAN = 2;\r\nvar STATE_CHANGED = 4;\r\nvar STATE_ENDED = 8;\r\nvar STATE_RECOGNIZED = STATE_ENDED;\r\nvar STATE_CANCELLED = 16;\r\nvar STATE_FAILED = 32;\r\n\r\n/**\r\n * Recognizer\r\n * Every recognizer needs to extend from this class.\r\n * @constructor\r\n * @param {Object} options\r\n */\r\nfunction Recognizer(options) {\r\n    this.id = uniqueId();\r\n\r\n    this.manager = null;\r\n    this.options = merge(options || {}, this.defaults);\r\n\r\n    // default is enable true\r\n    this.options.enable = ifUndefined(this.options.enable, true);\r\n\r\n    this.state = STATE_POSSIBLE;\r\n\r\n    this.simultaneous = {};\r\n    this.requireFail = [];\r\n}\r\n\r\nRecognizer.prototype = {\r\n    /**\r\n     * @virtual\r\n     * @type {Object}\r\n     */\r\n    defaults: {},\r\n\r\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @return {Recognizer}\r\n     */\r\n    set: function(options) {\r\n        extend(this.options, options);\r\n\r\n        // also update the touchAction, in case something changed about the directions/enabled state\r\n        this.manager && this.manager.touchAction.update();\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * recognize simultaneous with an other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    recognizeWith: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\r\n            return this;\r\n        }\r\n\r\n        var simultaneous = this.simultaneous;\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        if (!simultaneous[otherRecognizer.id]) {\r\n            simultaneous[otherRecognizer.id] = otherRecognizer;\r\n            otherRecognizer.recognizeWith(this);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    dropRecognizeWith: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\r\n            return this;\r\n        }\r\n\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        delete this.simultaneous[otherRecognizer.id];\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * recognizer can only run when an other is failing\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    requireFailure: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\r\n            return this;\r\n        }\r\n\r\n        var requireFail = this.requireFail;\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        if (inArray(requireFail, otherRecognizer) === -1) {\r\n            requireFail.push(otherRecognizer);\r\n            otherRecognizer.requireFailure(this);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    dropRequireFailure: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\r\n            return this;\r\n        }\r\n\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        var index = inArray(this.requireFail, otherRecognizer);\r\n        if (index > -1) {\r\n            this.requireFail.splice(index, 1);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * has require failures boolean\r\n     * @returns {boolean}\r\n     */\r\n    hasRequireFailures: function() {\r\n        return this.requireFail.length > 0;\r\n    },\r\n\r\n    /**\r\n     * if the recognizer can recognize simultaneous with an other recognizer\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Boolean}\r\n     */\r\n    canRecognizeWith: function(otherRecognizer) {\r\n        return !!this.simultaneous[otherRecognizer.id];\r\n    },\r\n\r\n    /**\r\n     * You should use `tryEmit` instead of `emit` directly to check\r\n     * that all the needed recognizers has failed before emitting.\r\n     * @param {Object} input\r\n     */\r\n    emit: function(input) {\r\n        var self = this;\r\n        var state = this.state;\r\n\r\n        function emit(withState) {\r\n            self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);\r\n        }\r\n\r\n        // 'panstart' and 'panmove'\r\n        if (state < STATE_ENDED) {\r\n            emit(true);\r\n        }\r\n\r\n        emit(); // simple 'eventName' events\r\n\r\n        // panend and pancancel\r\n        if (state >= STATE_ENDED) {\r\n            emit(true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check that all the require failure recognizers has failed,\r\n     * if true, it emits a gesture event,\r\n     * otherwise, setup the state to FAILED.\r\n     * @param {Object} input\r\n     */\r\n    tryEmit: function(input) {\r\n        if (this.canEmit()) {\r\n            return this.emit(input);\r\n        }\r\n        // it's failing anyway\r\n        this.state = STATE_FAILED;\r\n    },\r\n\r\n    /**\r\n     * can we emit?\r\n     * @returns {boolean}\r\n     */\r\n    canEmit: function() {\r\n        var i = 0;\r\n        while (i < this.requireFail.length) {\r\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\r\n                return false;\r\n            }\r\n            i++;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * update the recognizer\r\n     * @param {Object} inputData\r\n     */\r\n    recognize: function(inputData) {\r\n        // make a new copy of the inputData\r\n        // so we can change the inputData without messing up the other recognizers\r\n        var inputDataClone = extend({}, inputData);\r\n\r\n        // is is enabled and allow recognizing?\r\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\r\n            this.reset();\r\n            this.state = STATE_FAILED;\r\n            return;\r\n        }\r\n\r\n        // reset when we've reached the end\r\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\r\n            this.state = STATE_POSSIBLE;\r\n        }\r\n\r\n        this.state = this.process(inputDataClone);\r\n\r\n        // the recognizer has recognized a gesture\r\n        // so trigger an event\r\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\r\n            this.tryEmit(inputDataClone);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * return the state of the recognizer\r\n     * the actual recognizing happens in this method\r\n     * @virtual\r\n     * @param {Object} inputData\r\n     * @returns {Const} STATE\r\n     */\r\n    process: function(inputData) { }, // jshint ignore:line\r\n\r\n    /**\r\n     * return the preferred touch-action\r\n     * @virtual\r\n     * @returns {Array}\r\n     */\r\n    getTouchAction: function() { },\r\n\r\n    /**\r\n     * called when the gesture isn't allowed to recognize\r\n     * like when another is being recognized or it is disabled\r\n     * @virtual\r\n     */\r\n    reset: function() { }\r\n};\r\n\r\n/**\r\n * get a usable string, used as event postfix\r\n * @param {Const} state\r\n * @returns {String} state\r\n */\r\nfunction stateStr(state) {\r\n    if (state & STATE_CANCELLED) {\r\n        return 'cancel';\r\n    } else if (state & STATE_ENDED) {\r\n        return 'end';\r\n    } else if (state & STATE_CHANGED) {\r\n        return 'move';\r\n    } else if (state & STATE_BEGAN) {\r\n        return 'start';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * direction cons to string\r\n * @param {Const} direction\r\n * @returns {String}\r\n */\r\nfunction directionStr(direction) {\r\n    if (direction == DIRECTION_DOWN) {\r\n        return 'down';\r\n    } else if (direction == DIRECTION_UP) {\r\n        return 'up';\r\n    } else if (direction == DIRECTION_LEFT) {\r\n        return 'left';\r\n    } else if (direction == DIRECTION_RIGHT) {\r\n        return 'right';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * get a recognizer by name if it is bound to a manager\r\n * @param {Recognizer|String} otherRecognizer\r\n * @param {Recognizer} recognizer\r\n * @returns {Recognizer}\r\n */\r\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\r\n    var manager = recognizer.manager;\r\n    if (manager) {\r\n        return manager.get(otherRecognizer);\r\n    }\r\n    return otherRecognizer;\r\n}\r\n\r\n/**\r\n * This recognizer is just used as a base for the simple attribute recognizers.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction AttrRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(AttrRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof AttrRecognizer\r\n     */\r\n    defaults: {\r\n        /**\r\n         * @type {Number}\r\n         * @default 1\r\n         */\r\n        pointers: 1\r\n    },\r\n\r\n    /**\r\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {Boolean} recognized\r\n     */\r\n    attrTest: function(input) {\r\n        var optionPointers = this.options.pointers;\r\n        return optionPointers === 0 || input.pointers.length === optionPointers;\r\n    },\r\n\r\n    /**\r\n     * Process the input and return the state for the recognizer\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {*} State\r\n     */\r\n    process: function(input) {\r\n        var state = this.state;\r\n        var eventType = input.eventType;\r\n\r\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\r\n        var isValid = this.attrTest(input);\r\n\r\n        // on cancel input and we've recognized before, return STATE_CANCELLED\r\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\r\n            return state | STATE_CANCELLED;\r\n        } else if (isRecognized || isValid) {\r\n            if (eventType & INPUT_END) {\r\n                return state | STATE_ENDED;\r\n            } else if (!(state & STATE_BEGAN)) {\r\n                return STATE_BEGAN;\r\n            }\r\n            return state | STATE_CHANGED;\r\n        }\r\n        return STATE_FAILED;\r\n    }\r\n});\r\n\r\n/**\r\n * Pan\r\n * Recognized when the pointer is down and moved in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction PanRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n\r\n    this.pX = null;\r\n    this.pY = null;\r\n}\r\n\r\ninherit(PanRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PanRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'pan',\r\n        threshold: 10,\r\n        pointers: 1,\r\n        direction: DIRECTION_ALL\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        var direction = this.options.direction;\r\n        var actions = [];\r\n        if (direction & DIRECTION_HORIZONTAL) {\r\n            actions.push(TOUCH_ACTION_PAN_Y);\r\n        }\r\n        if (direction & DIRECTION_VERTICAL) {\r\n            actions.push(TOUCH_ACTION_PAN_X);\r\n        }\r\n        return actions;\r\n    },\r\n\r\n    directionTest: function(input) {\r\n        var options = this.options;\r\n        var hasMoved = true;\r\n        var distance = input.distance;\r\n        var direction = input.direction;\r\n        var x = input.deltaX;\r\n        var y = input.deltaY;\r\n\r\n        // lock to axis?\r\n        if (!(direction & options.direction)) {\r\n            if (options.direction & DIRECTION_HORIZONTAL) {\r\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n                hasMoved = x != this.pX;\r\n                distance = Math.abs(input.deltaX);\r\n            } else {\r\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\r\n                hasMoved = y != this.pY;\r\n                distance = Math.abs(input.deltaY);\r\n            }\r\n        }\r\n        input.direction = direction;\r\n        return hasMoved && distance > options.threshold && direction & options.direction;\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\r\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\r\n    },\r\n\r\n    emit: function(input) {\r\n        this.pX = input.deltaX;\r\n        this.pY = input.deltaY;\r\n\r\n        var direction = directionStr(input.direction);\r\n        if (direction) {\r\n            this.manager.emit(this.options.event + direction, input);\r\n        }\r\n\r\n        this._super.emit.call(this, input);\r\n    }\r\n});\r\n\r\n/**\r\n * Pinch\r\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction PinchRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(PinchRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'pinch',\r\n        threshold: 0,\r\n        pointers: 2\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_NONE];\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return this._super.attrTest.call(this, input) &&\r\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\r\n    },\r\n\r\n    emit: function(input) {\r\n        this._super.emit.call(this, input);\r\n        if (input.scale !== 1) {\r\n            var inOut = input.scale < 1 ? 'in' : 'out';\r\n            this.manager.emit(this.options.event + inOut, input);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Press\r\n * Recognized when the pointer is down for x ms without any movement.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction PressRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n\r\n    this._timer = null;\r\n    this._input = null;\r\n}\r\n\r\ninherit(PressRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PressRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'press',\r\n        pointers: 1,\r\n        time: 500, // minimal time of the pointer to be pressed\r\n        threshold: 5 // a minimal movement is ok, but keep it low\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_AUTO];\r\n    },\r\n\r\n    process: function(input) {\r\n        var options = this.options;\r\n        var validPointers = input.pointers.length === options.pointers;\r\n        var validMovement = input.distance < options.threshold;\r\n        var validTime = input.deltaTime > options.time;\r\n\r\n        this._input = input;\r\n\r\n        // we only allow little movement\r\n        // and we've reached an end event, so a tap is possible\r\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\r\n            this.reset();\r\n        } else if (input.eventType & INPUT_START) {\r\n            this.reset();\r\n            this._timer = setTimeoutContext(function() {\r\n                this.state = STATE_RECOGNIZED;\r\n                this.tryEmit();\r\n            }, options.time, this);\r\n        } else if (input.eventType & INPUT_END) {\r\n            return STATE_RECOGNIZED;\r\n        }\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    reset: function() {\r\n        clearTimeout(this._timer);\r\n    },\r\n\r\n    emit: function(input) {\r\n        if (this.state !== STATE_RECOGNIZED) {\r\n            return;\r\n        }\r\n\r\n        if (input && (input.eventType & INPUT_END)) {\r\n            this.manager.emit(this.options.event + 'up', input);\r\n        } else {\r\n            this._input.timeStamp = now();\r\n            this.manager.emit(this.options.event, this._input);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Rotate\r\n * Recognized when two or more pointer are moving in a circular motion.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction RotateRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(RotateRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof RotateRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'rotate',\r\n        threshold: 0,\r\n        pointers: 2\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_NONE];\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return this._super.attrTest.call(this, input) &&\r\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\r\n    }\r\n});\r\n\r\n/**\r\n * Swipe\r\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction SwipeRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(SwipeRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof SwipeRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'swipe',\r\n        threshold: 10,\r\n        velocity: 0.65,\r\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\r\n        pointers: 1\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return PanRecognizer.prototype.getTouchAction.call(this);\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        var direction = this.options.direction;\r\n        var velocity;\r\n\r\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\r\n            velocity = input.velocity;\r\n        } else if (direction & DIRECTION_HORIZONTAL) {\r\n            velocity = input.velocityX;\r\n        } else if (direction & DIRECTION_VERTICAL) {\r\n            velocity = input.velocityY;\r\n        }\r\n\r\n        return this._super.attrTest.call(this, input) &&\r\n            direction & input.direction &&\r\n            input.distance > this.options.threshold &&\r\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\r\n    },\r\n\r\n    emit: function(input) {\r\n        var direction = directionStr(input.direction);\r\n        if (direction) {\r\n            this.manager.emit(this.options.event + direction, input);\r\n        }\r\n\r\n        this.manager.emit(this.options.event, input);\r\n    }\r\n});\r\n\r\n/**\r\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\r\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\r\n * a single tap.\r\n *\r\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\r\n * multi-taps being recognized.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction TapRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n\r\n    // previous time and center,\r\n    // used for tap counting\r\n    this.pTime = false;\r\n    this.pCenter = false;\r\n\r\n    this._timer = null;\r\n    this._input = null;\r\n    this.count = 0;\r\n}\r\n\r\ninherit(TapRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'tap',\r\n        pointers: 1,\r\n        taps: 1,\r\n        interval: 300, // max time between the multi-tap taps\r\n        time: 250, // max time of the pointer to be down (like finger on the screen)\r\n        threshold: 2, // a minimal movement is ok, but keep it low\r\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_MANIPULATION];\r\n    },\r\n\r\n    process: function(input) {\r\n        var options = this.options;\r\n\r\n        var validPointers = input.pointers.length === options.pointers;\r\n        var validMovement = input.distance < options.threshold;\r\n        var validTouchTime = input.deltaTime < options.time;\r\n\r\n        this.reset();\r\n\r\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\r\n            return this.failTimeout();\r\n        }\r\n\r\n        // we only allow little movement\r\n        // and we've reached an end event, so a tap is possible\r\n        if (validMovement && validTouchTime && validPointers) {\r\n            if (input.eventType != INPUT_END) {\r\n                return this.failTimeout();\r\n            }\r\n\r\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\r\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\r\n\r\n            this.pTime = input.timeStamp;\r\n            this.pCenter = input.center;\r\n\r\n            if (!validMultiTap || !validInterval) {\r\n                this.count = 1;\r\n            } else {\r\n                this.count += 1;\r\n            }\r\n\r\n            this._input = input;\r\n\r\n            // if tap count matches we have recognized it,\r\n            // else it has began recognizing...\r\n            var tapCount = this.count % options.taps;\r\n            if (tapCount === 0) {\r\n                // no failing requirements, immediately trigger the tap event\r\n                // or wait as long as the multitap interval to trigger\r\n                if (!this.hasRequireFailures()) {\r\n                    return STATE_RECOGNIZED;\r\n                } else {\r\n                    this._timer = setTimeoutContext(function() {\r\n                        this.state = STATE_RECOGNIZED;\r\n                        this.tryEmit();\r\n                    }, options.interval, this);\r\n                    return STATE_BEGAN;\r\n                }\r\n            }\r\n        }\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    failTimeout: function() {\r\n        this._timer = setTimeoutContext(function() {\r\n            this.state = STATE_FAILED;\r\n        }, this.options.interval, this);\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    reset: function() {\r\n        clearTimeout(this._timer);\r\n    },\r\n\r\n    emit: function() {\r\n        if (this.state == STATE_RECOGNIZED ) {\r\n            this._input.tapCount = this.count;\r\n            this.manager.emit(this.options.event, this._input);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Simple way to create an manager with a default set of recognizers.\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nfunction Hammer(element, options) {\r\n    options = options || {};\r\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\r\n    return new Manager(element, options);\r\n}\r\n\r\n/**\r\n * @const {string}\r\n */\r\nHammer.VERSION = '2.0.4';\r\n\r\n/**\r\n * default settings\r\n * @namespace\r\n */\r\nHammer.defaults = {\r\n    /**\r\n     * set if DOM events are being triggered.\r\n     * But this is slower and unused by simple implementations, so disabled by default.\r\n     * @type {Boolean}\r\n     * @default false\r\n     */\r\n    domEvents: false,\r\n\r\n    /**\r\n     * The value for the touchAction property/fallback.\r\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\r\n     * @type {String}\r\n     * @default compute\r\n     */\r\n    touchAction: TOUCH_ACTION_COMPUTE,\r\n\r\n    /**\r\n     * @type {Boolean}\r\n     * @default true\r\n     */\r\n    enable: true,\r\n\r\n    /**\r\n     * EXPERIMENTAL FEATURE -- can be removed/changed\r\n     * Change the parent input target element.\r\n     * If Null, then it is being set the to main element.\r\n     * @type {Null|EventTarget}\r\n     * @default null\r\n     */\r\n    inputTarget: null,\r\n\r\n    /**\r\n     * force an input class\r\n     * @type {Null|Function}\r\n     * @default null\r\n     */\r\n    inputClass: null,\r\n\r\n    /**\r\n     * Default recognizer setup when calling `Hammer()`\r\n     * When creating a new Manager these will be skipped.\r\n     * @type {Array}\r\n     */\r\n    preset: [\r\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\r\n        [RotateRecognizer, { enable: false }],\r\n        [PinchRecognizer, { enable: false }, ['rotate']],\r\n        [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],\r\n        [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']],\r\n        [TapRecognizer],\r\n        [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],\r\n        [PressRecognizer]\r\n    ],\r\n\r\n    /**\r\n     * Some CSS properties can be used to improve the working of Hammer.\r\n     * Add them to this method and they will be set when creating a new Manager.\r\n     * @namespace\r\n     */\r\n    cssProps: {\r\n        /**\r\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        userSelect: 'none',\r\n\r\n        /**\r\n         * Disable the Windows Phone grippers when pressing an element.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        touchSelect: 'none',\r\n\r\n        /**\r\n         * Disables the default callout shown when you touch and hold a touch target.\r\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\r\n         * a callout containing information about the link. This property allows you to disable that callout.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        touchCallout: 'none',\r\n\r\n        /**\r\n         * Specifies whether zooming is enabled. Used by IE10>\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        contentZooming: 'none',\r\n\r\n        /**\r\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        userDrag: 'none',\r\n\r\n        /**\r\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\r\n         * clickable element in iOS. This property obeys the alpha value, if specified.\r\n         * @type {String}\r\n         * @default 'rgba(0,0,0,0)'\r\n         */\r\n        tapHighlightColor: 'rgba(0,0,0,0)'\r\n    }\r\n};\r\n\r\nvar STOP = 1;\r\nvar FORCED_STOP = 2;\r\n\r\n/**\r\n * Manager\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nfunction Manager(element, options) {\r\n    options = options || {};\r\n\r\n    this.options = merge(options, Hammer.defaults);\r\n    this.options.inputTarget = this.options.inputTarget || element;\r\n\r\n    this.handlers = {};\r\n    this.session = {};\r\n    this.recognizers = [];\r\n\r\n    this.element = element;\r\n    this.input = createInputInstance(this);\r\n    this.touchAction = new TouchAction(this, this.options.touchAction);\r\n\r\n    toggleCssProps(this, true);\r\n\r\n    each(options.recognizers, function(item) {\r\n        var recognizer = this.add(new (item[0])(item[1]));\r\n        item[2] && recognizer.recognizeWith(item[2]);\r\n        item[3] && recognizer.requireFailure(item[3]);\r\n    }, this);\r\n}\r\n\r\nManager.prototype = {\r\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @returns {Manager}\r\n     */\r\n    set: function(options) {\r\n        extend(this.options, options);\r\n\r\n        // Options that need a little more setup\r\n        if (options.touchAction) {\r\n            this.touchAction.update();\r\n        }\r\n        if (options.inputTarget) {\r\n            // Clean up existing event listeners and reinitialize\r\n            this.input.destroy();\r\n            this.input.target = options.inputTarget;\r\n            this.input.init();\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * stop recognizing for this session.\r\n     * This session will be discarded, when a new [input]start event is fired.\r\n     * When forced, the recognizer cycle is stopped immediately.\r\n     * @param {Boolean} [force]\r\n     */\r\n    stop: function(force) {\r\n        this.session.stopped = force ? FORCED_STOP : STOP;\r\n    },\r\n\r\n    /**\r\n     * run the recognizers!\r\n     * called by the inputHandler function on every movement of the pointers (touches)\r\n     * it walks through all the recognizers and tries to detect the gesture that is being made\r\n     * @param {Object} inputData\r\n     */\r\n    recognize: function(inputData) {\r\n        var session = this.session;\r\n        if (session.stopped) {\r\n            return;\r\n        }\r\n\r\n        // run the touch-action polyfill\r\n        this.touchAction.preventDefaults(inputData);\r\n\r\n        var recognizer;\r\n        var recognizers = this.recognizers;\r\n\r\n        // this holds the recognizer that is being recognized.\r\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\r\n        // if no recognizer is detecting a thing, it is set to `null`\r\n        var curRecognizer = session.curRecognizer;\r\n\r\n        // reset when the last recognizer is recognized\r\n        // or when we're in a new session\r\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\r\n            curRecognizer = session.curRecognizer = null;\r\n        }\r\n\r\n        var i = 0;\r\n        while (i < recognizers.length) {\r\n            recognizer = recognizers[i];\r\n\r\n            // find out if we are allowed try to recognize the input for this one.\r\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\r\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\r\n            //      that is being recognized.\r\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\r\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\r\n            if (session.stopped !== FORCED_STOP && ( // 1\r\n                    !curRecognizer || recognizer == curRecognizer || // 2\r\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\r\n                recognizer.recognize(inputData);\r\n            } else {\r\n                recognizer.reset();\r\n            }\r\n\r\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\r\n            // current active recognizer. but only if we don't already have an active recognizer\r\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\r\n                curRecognizer = session.curRecognizer = recognizer;\r\n            }\r\n            i++;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * get a recognizer by its event name.\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Recognizer|Null}\r\n     */\r\n    get: function(recognizer) {\r\n        if (recognizer instanceof Recognizer) {\r\n            return recognizer;\r\n        }\r\n\r\n        var recognizers = this.recognizers;\r\n        for (var i = 0; i < recognizers.length; i++) {\r\n            if (recognizers[i].options.event == recognizer) {\r\n                return recognizers[i];\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * add a recognizer to the manager\r\n     * existing recognizers with the same event name will be removed\r\n     * @param {Recognizer} recognizer\r\n     * @returns {Recognizer|Manager}\r\n     */\r\n    add: function(recognizer) {\r\n        if (invokeArrayArg(recognizer, 'add', this)) {\r\n            return this;\r\n        }\r\n\r\n        // remove existing\r\n        var existing = this.get(recognizer.options.event);\r\n        if (existing) {\r\n            this.remove(existing);\r\n        }\r\n\r\n        this.recognizers.push(recognizer);\r\n        recognizer.manager = this;\r\n\r\n        this.touchAction.update();\r\n        return recognizer;\r\n    },\r\n\r\n    /**\r\n     * remove a recognizer by name or instance\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Manager}\r\n     */\r\n    remove: function(recognizer) {\r\n        if (invokeArrayArg(recognizer, 'remove', this)) {\r\n            return this;\r\n        }\r\n\r\n        var recognizers = this.recognizers;\r\n        recognizer = this.get(recognizer);\r\n        recognizers.splice(inArray(recognizers, recognizer), 1);\r\n\r\n        this.touchAction.update();\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * bind event\r\n     * @param {String} events\r\n     * @param {Function} handler\r\n     * @returns {EventEmitter} this\r\n     */\r\n    on: function(events, handler) {\r\n        var handlers = this.handlers;\r\n        each(splitStr(events), function(event) {\r\n            handlers[event] = handlers[event] || [];\r\n            handlers[event].push(handler);\r\n        });\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * unbind event, leave emit blank to remove all handlers\r\n     * @param {String} events\r\n     * @param {Function} [handler]\r\n     * @returns {EventEmitter} this\r\n     */\r\n    off: function(events, handler) {\r\n        var handlers = this.handlers;\r\n        each(splitStr(events), function(event) {\r\n            if (!handler) {\r\n                delete handlers[event];\r\n            } else {\r\n                handlers[event].splice(inArray(handlers[event], handler), 1);\r\n            }\r\n        });\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * emit event to the listeners\r\n     * @param {String} event\r\n     * @param {Object} data\r\n     */\r\n    emit: function(event, data) {\r\n        // we also want to trigger dom events\r\n        if (this.options.domEvents) {\r\n            triggerDomEvent(event, data);\r\n        }\r\n\r\n        // no handlers, so skip it all\r\n        var handlers = this.handlers[event] && this.handlers[event].slice();\r\n        if (!handlers || !handlers.length) {\r\n            return;\r\n        }\r\n\r\n        data.type = event;\r\n        data.preventDefault = function() {\r\n            data.srcEvent.preventDefault();\r\n        };\r\n\r\n        var i = 0;\r\n        while (i < handlers.length) {\r\n            handlers[i](data);\r\n            i++;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * destroy the manager and unbinds all events\r\n     * it doesn't unbind dom events, that is the user own responsibility\r\n     */\r\n    destroy: function() {\r\n        this.element && toggleCssProps(this, false);\r\n\r\n        this.handlers = {};\r\n        this.session = {};\r\n        this.input.destroy();\r\n        this.element = null;\r\n    }\r\n};\r\n\r\n/**\r\n * add/remove the css properties as defined in manager.options.cssProps\r\n * @param {Manager} manager\r\n * @param {Boolean} add\r\n */\r\nfunction toggleCssProps(manager, add) {\r\n    var element = manager.element;\r\n    each(manager.options.cssProps, function(value, name) {\r\n        element.style[prefixed(element.style, name)] = add ? value : '';\r\n    });\r\n}\r\n\r\n/**\r\n * trigger dom event\r\n * @param {String} event\r\n * @param {Object} data\r\n */\r\nfunction triggerDomEvent(event, data) {\r\n    var gestureEvent = document.createEvent('Event');\r\n    gestureEvent.initEvent(event, true, true);\r\n    gestureEvent.gesture = data;\r\n    data.target.dispatchEvent(gestureEvent);\r\n}\r\n\r\nextend(Hammer, {\r\n    INPUT_START: INPUT_START,\r\n    INPUT_MOVE: INPUT_MOVE,\r\n    INPUT_END: INPUT_END,\r\n    INPUT_CANCEL: INPUT_CANCEL,\r\n\r\n    STATE_POSSIBLE: STATE_POSSIBLE,\r\n    STATE_BEGAN: STATE_BEGAN,\r\n    STATE_CHANGED: STATE_CHANGED,\r\n    STATE_ENDED: STATE_ENDED,\r\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\r\n    STATE_CANCELLED: STATE_CANCELLED,\r\n    STATE_FAILED: STATE_FAILED,\r\n\r\n    DIRECTION_NONE: DIRECTION_NONE,\r\n    DIRECTION_LEFT: DIRECTION_LEFT,\r\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\r\n    DIRECTION_UP: DIRECTION_UP,\r\n    DIRECTION_DOWN: DIRECTION_DOWN,\r\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\r\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\r\n    DIRECTION_ALL: DIRECTION_ALL,\r\n\r\n    Manager: Manager,\r\n    Input: Input,\r\n    TouchAction: TouchAction,\r\n\r\n    TouchInput: TouchInput,\r\n    MouseInput: MouseInput,\r\n    PointerEventInput: PointerEventInput,\r\n    TouchMouseInput: TouchMouseInput,\r\n    SingleTouchInput: SingleTouchInput,\r\n\r\n    Recognizer: Recognizer,\r\n    AttrRecognizer: AttrRecognizer,\r\n    Tap: TapRecognizer,\r\n    Pan: PanRecognizer,\r\n    Swipe: SwipeRecognizer,\r\n    Pinch: PinchRecognizer,\r\n    Rotate: RotateRecognizer,\r\n    Press: PressRecognizer,\r\n\r\n    on: addEventListeners,\r\n    off: removeEventListeners,\r\n    each: each,\r\n    merge: merge,\r\n    extend: extend,\r\n    inherit: inherit,\r\n    bindFn: bindFn,\r\n    prefixed: prefixed\r\n});\r\n\r\nif (typeof define == TYPE_FUNCTION && define.amd) {\r\n    define(function() {\r\n        return Hammer;\r\n    });\r\n} else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Hammer;\r\n} else {\r\n    window[exportName] = Hammer;\r\n}\r\n\r\n})(window, document, 'Hammer');\r\n"]}